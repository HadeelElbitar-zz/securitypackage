<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AD/8AAB//gAA//+AAf//wAP///gD//////8=
</value>
  </data>
</root>